<?php  class SOD_Webconnector {	public $map, $error_maps;	public function __construct(){		 //	$this->quickbooks = new SOD_QuickbooksPOS_Data;		}	public static function getFunctionMappings(){		$map = array(			/*			 * Check Connection			 */			'QBPOS_CHECK_CONNECTION' 	=> array( 				'SOD_Webconnector::_qbpos_check_connection_request', 				'SOD_Webconnector::_qbpos_check_connection_response' 			),			/*			 * Add Customer			 */			'QBPOS_ADD_CUSTOMER' 		=> array( 				'SOD_Webconnector::_qbpos_customer_add_request',				'SOD_Webconnector::_qbpos_customer_add_response' 			),			/*			 * Add Customer with Receipt Callback			 */						'QBPOS_ADD_CUST_RCPT'		=> array( 				'SOD_Webconnector::_qbpos_customer_for_salesreceipt_add_request', 				'SOD_Webconnector::_qbpos_customer_for_salesreceipt_add_response' 			),			/*			 * Add Receipt for new customer			 */			'QBPOS_ADD_RCPT_CUST'		=> array( 				'SOD_Webconnector::_qbpos_salesreceipt_for_newcustomer_add_request', 				'SOD_Webconnector::_qbpos_salesreceipt_for_newcustomer_add_response' 			),			/*			 * Add Receipt			 */			'QBPOS_ADD_RECEIPT' 		=> array( 				'SOD_Webconnector::_qbpos_salesreceipt_add_request', 				'SOD_Webconnector::_qbpos_salesreceipt_add_response' 			),			/*			 * Customer Query			 */			'QBPOS_CUST_QUERY'			=> array( 				'SOD_Webconnector::_qbpos_customer_query_request',				'SOD_Webconnector::_qbpos_customer_query_response'			),			/*			 * Single Item Query			 */ 			'QBPOS_ITEM_INVENTORY_QUERY'=> array( 				'SOD_Webconnector::_quicbookspos_inventory_query_request', 				'SOD_Webconnector::_quicbookspos_inventory_query_response' 			),			/*			 * Single Item Add to QBPOS			 */			'QBPOS_ITEM_INVENTORY_ADD' 	=> array( 				'SOD_Webconnector::_quicbookspos_inventory_add_request', 				'SOD_Webconnector::_quicbookspos_inventory_add_response' 			),			/*			 * Single Item Inv Update from QBPOS			 */			'QBPOS_ITEM_INV_UPDATE' 	=> array( 				'SOD_Webconnector::_quicbookspos_inventory_update_request', 				'SOD_Webconnector::_quicbookspos_inventory_update_response' 			),						/*			 * Customer Account Setups			 */			'QBPOS_CUST_ACCT_SETUP'		=> array( 				'SOD_Webconnector::_qbpos_customer_accounts_query_request',				'SOD_Webconnector::_qbpos_customer_accounts_query_response'			),			/*			 * Payment Methods Setup			 */			'QBPOS_PAYMENT_METHODS'		=> array( 				'SOD_Webconnector::_qbpos_payment_methods_request',				'SOD_Webconnector::_qbpos_payment_methods_response'			),			/*			 * Depts Setup			 */					'QBPOS_DEPARTMENTS'			=> array( 				'SOD_Webconnector::_qbpos_departments_request',				'SOD_Webconnector::_qbpos_departments_response'			),			/*			 * Price Levels Setup			 */			'QBPOS_PRICELEVELS'			=> array( 				'SOD_Webconnector::_qbpos_pricelevels_request',				'SOD_Webconnector::_qbpos_pricelevels_response'			),			/*			 * Vendors Setup			 */			'QBPOS_VENDORS'				=> array( 				'SOD_Webconnector::_qbpos_vendors_request',				'SOD_Webconnector::_qbpos_vendors_response'			),			/*			 * Tax Records Setup			 */			'QBPOS_TAX_RECORDDS'		=> array( 				'SOD_Webconnector::_qbpos_tax_records_request',				'SOD_Webconnector::_qbpos_tax_records_response'			),			/*			 * Shipping Setup			 */			'QBPOS_SHIPPING'			=> array( 				'SOD_Webconnector::_qbpos_shipping_request',				'SOD_Webconnector::_qbpos_shipping_response'			),						);		$map = apply_filters('sod_qbpos_webconnector_functions', $map);		return $map;	}	public static function getErrorMappings(){		$error_maps = 	array(			'QBPOS_CUST_QUERY'			=> 'SOD_Webconnector::_qbpos_customer_not_found',			'QBPOS_PRICELEVELS'			=> 'SOD_Webconnector::_qbpos_broken_iterator',			'QBPOS_CUST_ACCT_SETUP'		=> 'SOD_Webconnector::_qbpos_broken_iterator',			'QBPOS_ITEM_INV_UPDATE' 	=> 'SOD_Webconnector::_qbpos_product_not_found', 		 	'QBPOS_ITEM_INVENTORY_QUERY'=> 'SOD_Webconnector::_qbpos_product_not_found',     // When there's no result to import		 	'QBPOS_ITEM_INVENTORY_ADD'	=> 'SOD_Webconnector::_qbpos_product_already_exists',		 	'QBPOS_ADD_CUST_RCPT'		=> 'SOD_Webconnector::_qbpos_customer_already_exists',			'QBPOS_ADD_INVOICE'			=> 'SOD_Webconnector::_qbpos_invoice_add_request',			'QBPOS_ADD_RECEIPT'			=> 'SOD_Webconnector::_qbpos_failed_salesreceipt_add',			20033						=> 'SOD_Webconnector::_qbpos_broken_iterator',			'QBPOS_INVENTORY_SYNC_START'=> 'SOD_Webconnector::_qbpos_no_inventory'		);						$error_maps = apply_filters('sod_qbpos_webconnector_error_functions', $error_maps);				return $error_maps;	}			public static function _qbpos_shipping_request($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale){ 		$xml ='<?xml version="1.0" encoding="utf-8"?>							<?qbposxml version="2.0"?>											<QBPOSXML>													<QBPOSXMLMsgsRq onError="stopOnError">							 								<CompanyQueryRq requestID="'.$requestID.'">  																</CompanyQueryRq>														</QBPOSXMLMsgsRq>												</QBPOSXML>';		return $xml;	}	public static function _qbpos_shipping_response($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents){			$errnum = 0;						$errmsg = '';						$quickbooks = new SOD_QuickbooksPOS_Data;						$Parser = new QuickBooks_XML_Parser($xml);						$Doc = $Parser->parse($errnum, $errmsg);		    		    $Root = $Doc->getRoot();		    		    $List = $Root->getChildAt('QBPOSXML/QBPOSXMLMsgsRs/CompanyQueryRs/CompanyRet');						$items = array();		    		    foreach ($List->children() as $Item)		        {		    			    	if($Item->getChildDataAt('ShippingProvider')):	        						$items[$Item->getChildDataAt('ShippingProvider')] = $Item->getChildDataAt('ShippingProvider');								endif;	        			    }						$quickbooks->set_accounts("Shipping",$items);			// ///$quickbooks->check_defaults();			return true;		}	public static function _qbpos_tax_records_request($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale){ 		$xml ='<?xml version="1.0" encoding="utf-8"?>							<?qbposxml version="2.0"?>								<QBPOSXML>									<QBPOSXMLMsgsRq onError="stopOnError"> 										<CompanyQueryRq requestID="'.$requestID.'">  										</CompanyQueryRq>									</QBPOSXMLMsgsRq>								</QBPOSXML>';				return $xml;	}	public static function _qbpos_tax_records_response($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents){			$errnum = 0;					$errmsg = '';					$quickbooks = new SOD_QuickbooksPOS_Data;					$Parser = new QuickBooks_XML_Parser($xml);					$Doc = $Parser->parse($errnum, $errmsg);				    $Root = $Doc->getRoot();				    $List = $Root->getChildAt('QBPOSXML/QBPOSXMLMsgsRs/CompanyQueryRs/CompanyRet');					$items = array();				    foreach ($List->children() as $Item)		        {				        	if($Item->getChildDataAt('TaxRecord TaxCategoryListID') || $Item->getChildDataAt('TaxRecord POSTaxCode')):	    		    			$items[$Item->getChildDataAt('TaxRecord TaxCategoryListID')] = array(	            		'TaxCategoryListID' => $Item->getChildDataAt('TaxRecord TaxCategoryListID'),	            		'TaxCategory' => $Item->getChildDataAt('TaxRecord TaxCategory'),	            		'POSTaxCodeListID' => $Item->getChildDataAt('TaxRecord POSTaxCodeListID'),	            		'POSTaxCode' => $Item->getChildDataAt('TaxRecord POSTaxCode'),	            	);							endif;						}					$quickbooks->set_accounts("SalesTaxRecords",$items);					return true;		}	public static function _qbpos_departments_request($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale){ 		$xml ='<?xml version="1.0" encoding="utf-8"?>							<?qbposxml version="2.0"?>								<QBPOSXML>									<QBPOSXMLMsgsRq onError="stopOnError"> 										<DepartmentQueryRq requestID="'.$requestID.'">  										</DepartmentQueryRq>									</QBPOSXMLMsgsRq>								</QBPOSXML>';				return $xml;		}	public static function _qbpos_departments_response($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents){			$errnum = 0;				$errmsg = '';				$quickbooks = new SOD_QuickbooksPOS_Data;				$Parser = new QuickBooks_XML_Parser($xml);				$Doc = $Parser->parse($errnum, $errmsg);			    $Root = $Doc->getRoot();			    $List = $Root->getChildAt('QBPOSXML/QBPOSXMLMsgsRs/DepartmentQueryRs');				$items = array();			    foreach ($List->children() as $Item)		        {			         $items[$Item->getChildDataAt('DepartmentRet DepartmentName')] = array(		            	'ListID' => $Item->getChildDataAt('DepartmentRet ListID'),		            	'DepartmentCode' => $Item->getChildDataAt('DepartmentRet DepartmentCode'),		            	'DepartmentName' => $Item->getChildDataAt('DepartmentRet DepartmentName'),		            	'TaxCode' => $Item->getChildDataAt('DepartmentRet TaxCode'),		            );				}				$quickbooks->set_accounts("Departments",$items);			//$quickbooks->check_defaults();			return true;			}	public static function _qbpos_vendors_request($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale){		$iterator='';			if(!empty($extra)){				if(array_key_exists('iteratorID',$extra)){					$iterator='iterator="Continue" iteratorID="'.$extra['iteratorID'].'"';				}			}else{				$iterator='iterator="Start"';			}	 		$xml ='<?xml version="1.0" encoding="utf-8"?>						<?qbposxml version="2.0"?>							<QBPOSXML>								<QBPOSXMLMsgsRq onError="stopOnError"> 									<VendorQueryRq requestID="'.$requestID.'" '.$iterator.'>										<MaxReturned>100</MaxReturned>  									</VendorQueryRq>								</QBPOSXMLMsgsRq>							</QBPOSXML>';			return $xml;		}	public static function _qbpos_vendors_response($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents){			$errnum = 0;				$errmsg = '';				$quickbooks = new SOD_QuickbooksPOS_Data;				$Parser = new QuickBooks_XML_Parser($xml);				$Doc = $Parser->parse($errnum, $errmsg);			    $Root = $Doc->getRoot();				$remaining = $idents['iteratorRemainingCount'];			    $List = $Root->getChildAt('QBPOSXML/QBPOSXMLMsgsRs/VendorQueryRs');				$items = array();			    foreach ($List->children() as $Item)			        {				         $items[$Item->getChildDataAt('VendorRet CompanyName')] = array(		            	'ListID' => $Item->getChildDataAt('VendorRet ListID'),		            	'VendorCode' => $Item->getChildDataAt('VendorRet VendorCode'),		            	'CompanyName' => $Item->getChildDataAt('VendorRet CompanyName'),		            );						}					$old_items = $quickbooks->get_accounts("Vendors");					if($old_items){								$merged = array_merge($arr,$old_items);						$quickbooks->set_accounts("Vendors",$merged);					}else{						$quickbooks->set_accounts("Vendors",$items);					}			if((int)$remaining>0){						$Queue = new QuickBooks_WebConnector_Queue($quickbooks->dsn);						$extra = $idents;						$Queue->enqueue('QBPOS_VENDORS',uniqid(),100,$extra, $quickbooks->user);					}			return true;		}	public static function _qbpos_pricelevels_request($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale){ 		$xml ='<?xml version="1.0" encoding="utf-8"?>							<?qbposxml version="2.0"?>								<QBPOSXML>									<QBPOSXMLMsgsRq onError="stopOnError"> 										<CompanyQueryRq requestID="'.$requestID.'">  										</CompanyQueryRq>									</QBPOSXMLMsgsRq>								</QBPOSXML>';				return $xml;	}	public static function _qbpos_pricelevels_response($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents){			$errnum = 0;					$errmsg = '';					$quickbooks = new SOD_QuickbooksPOS_Data;					$Parser = new QuickBooks_XML_Parser($xml);					$Doc = $Parser->parse($errnum, $errmsg);				    $Root = $Doc->getRoot();				    $List = $Root->getChildAt('QBPOSXML/QBPOSXMLMsgsRs/CompanyQueryRs');					$items = array();				    foreach ($List->children() as $Item)				        {		        		if($Item->getChildDataAt('CompanyRet PriceLevel1 Name')):								 	$items['PriceLevel1'] = array(				            	'Name' => $Item->getChildDataAt('CompanyRet PriceLevel1 Name'),				            	'Markdown' => $Item->getChildDataAt('CompanyRet PriceLevel1 Markdown')							);								endif;								if($Item->getChildDataAt('CompanyRet PriceLevel2 Name')):				            		$items['PriceLevel2'] = array(				            	'Name' => $Item->getChildDataAt('CompanyRet PriceLevel2 Name'),				            	'Markdown' => $Item->getChildDataAt('CompanyRet PriceLevel2 Markdown')							);								endif;								if($Item->getChildDataAt('CompanyRet PriceLevel3 Name')):									$items['PriceLevel3'] = array(				            	'Name' => $Item->getChildDataAt('CompanyRet PriceLevel3 Name'),				            	'Markdown' => $Item->getChildDataAt('CompanyRet PriceLevel3 Markdown')							);								endif;								if($Item->getChildDataAt('CompanyRet PriceLevel4 Name')):									$items['PriceLevel4'] = array(				            	'Name' => $Item->getChildDataAt('CompanyRet PriceLevel4 Name'),				            	'Markdown' => $Item->getChildDataAt('CompanyRet PriceLevel4 Markdown')							);								endif;								if($Item->getChildDataAt('CompanyRet PriceLevel5 Name')):									$items['PriceLevel5'] = array(				            	'Name' => $Item->getChildDataAt('CompanyRet PriceLevel5 Name'),				            	'Markdown' => $Item->getChildDataAt('CompanyRet PriceLevel5 Markdown')							);								endif;									}  			$quickbooks->set_accounts("PriceLevels",$items);			//$quickbooks->check_defaults();			return true;			}	public static function _qbpos_check_connection_request($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale){ 		$xml ='<?xml version="1.0" encoding="utf-8"?>						<?qbposxml version="2.0"?>							<QBPOSXML>								<QBPOSXMLMsgsRq onError="stopOnError"> 									<CompanyQueryRq>  									</CompanyQueryRq>								</QBPOSXMLMsgsRq>							</QBPOSXML>';			return $xml;		}	public static function _qbpos_check_connection_response($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents){			$errnum = 0;				$errmsg = '';				$quickbooks = new SOD_QuickbooksPOS_Data;				$Parser = new QuickBooks_XML_Parser($xml);				$Doc = $Parser->parse($errnum, $errmsg);			    $Root = $Doc->getRoot();			    $List = $Root->getChildAt('QBPOSXML/QBPOSXMLMsgsRs/CompanyQueryRs');				$items = array();					    foreach ($List->children() as $Item)			        {			         $items = array(		            	'OwnerID' => $Item->getChildDataAt('CompanyRet DataExtRet OwnerID')		            );					}				$quickbooks->set_preferences($items);				$quickbooks->check_defaults();				return true;		}	public static function _qbpos_customer_accounts_query_request($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale){			$iterator='';						if(!empty($extra)){							if(array_key_exists('iteratorID',$extra)){								$iterator='iterator="Continue" iteratorID="'.$extra['iteratorID'].'"';							}						}else{							$iterator='iterator="Start"';			}						$xml ='<?xml version="1.0" encoding="utf-8"?>									<?qbposxml version="2.0"?>										<QBPOSXML>											<QBPOSXMLMsgsRq onError="continueOnError">												<CustomerQueryRq requestID="'.$requestID.'" '.$iterator.'>													<MaxReturned>100</MaxReturned>												</CustomerQueryRq>											</QBPOSXMLMsgsRq>										</QBPOSXML>';						return $xml;			}	public static function _qbpos_customer_accounts_query_response($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents){		$errnum = 0;				$errmsg = '';				$quickbooks = new SOD_QuickbooksPOS_Data;				$Parser = new QuickBooks_XML_Parser($xml);				$Doc = $Parser->parse($errnum, $errmsg);	    	    $Root = $Doc->getRoot();				$List = $Root->getChildAt('QBPOSXML/QBPOSXMLMsgsRs/CustomerQueryRs');				$remaining = $idents['iteratorRemainingCount'];				  foreach ($List->children() as $Item)	        {	    		     $arr[$Item->getChildDataAt('CustomerRet FullName')] = array(		                'ListID' => $Item->getChildDataAt('CustomerRet ListID'),		                'FullName' => $Item->getChildDataAt('CustomerRet FullName')		            );					}				$old_items = $quickbooks->get_accounts("Customers");				if($old_items){					$merged = array_merge($arr,$old_items);					$quickbooks->set_accounts("Customers",$merged);				}else{					$quickbooks->set_accounts("Customers",$arr);				}				if((int)$remaining>0){					$Queue = new QuickBooks_WebConnector_Queue($quickbooks->dsn);					$extra = $idents;					$Queue->enqueue('QBPOS_CUST_ACCT_SETUP',uniqid(),0,$extra, $quickbooks->user);				}				return true;		    }	public static function _qbpos_customer_query_request($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale){			$wc_order 		= new WC_Order( $ID );			$xml = '<?xml version="1.0" encoding="utf-8"?>						<?qbposxml version="2.0"?>							<QBPOSXML>								<QBPOSXMLMsgsRq onError="stopOnError"> 									<CustomerQueryRq>										<EMailFilter>											<MatchStringCriterion>Equal</MatchStringCriterion>											<EMail>'.$wc_order->billing_email.'</EMail>										</EMailFilter>										<FirstNameFilter>											<MatchStringCriterion>Equal</MatchStringCriterion>											<FirstName>'.$wc_order->billing_first_name.'</FirstName>										</FirstNameFilter>										<LastNameFilter>											<MatchStringCriterion>Equal</MatchStringCriterion>											<LastName>'.$wc_order->billing_last_name.'</LastName>										</LastNameFilter>									</CustomerQueryRq>								</QBPOSXMLMsgsRq>							</QBPOSXML>';				return $xml;		}	public static function _qbpos_customer_query_response($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents){			$errnum = 0;			$errmsg = '';			$quickbooks = new SOD_QuickbooksPOS_Data;			$Parser = new QuickBooks_XML_Parser($xml);			$Doc = $Parser->parse($errnum, $errmsg);		    $Root = $Doc->getRoot();		    $List = $Root->getChildAt('QBPOSXML/QBPOSXMLMsgsRs/CustomerQueryRs');		      foreach ($List->children() as $Item)		        {		         $arr = array(		           		'ListID' => $Item->getChildDataAt('CustomerRet ListID'),		              );					$quickbooks->update_customer_listid($ID,$arr['ListID']);	            }			$Queue = new QuickBooks_WebConnector_Queue($quickbooks->dsn);			$Queue->enqueue('QBPOS_ADD_RECEIPT', $ID,7, NULL, $quickbooks->user);			return true;			}	public static function _qbpos_customer_for_salesreceipt_add_request($requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $version, $locale)		{			$WC_Order	= new WC_Order( $ID );			$xml = '<?xml version="1.0" encoding="utf-8"?>				<?qbposxml version="2.0"?>				<QBPOSXML>					<QBPOSXMLMsgsRq onError="stopOnError">						<CustomerAddRq requestID="' . $requestID . '">							<CustomerAdd>';								if(isset($WC_Order->billing_company)):									$xml .='<CompanyName>'.$WC_Order->billing_company.'</CompanyName>';								endif;								if(isset($WC_Order->billing_company)):									$xml .='<FirstName>'.$WC_Order->billing_first_name.'</FirstName>';								endif;								if(isset($WC_Order->billing_company)):									$xml .='<LastName>'.$WC_Order->billing_last_name.'</LastName>';								endif;								if(isset($WC_Order->billing_address1)):										$xml .='<BillAddress>';										if($WC_Order->billing_address_1):											$xml .='<Street>'.$WC_Order->billing_address_1.'</Street>';										endif;										if($WC_Order->billing_address_2):											$xml .='<Street2>'.$WC_Order->billing_address_2.'</Street2>';										endif;										if(isset($WC_Order->billing_city)):											$xml .='<City>'.$WC_Order->billing_city.'</City>';										endif;										if(isset($WC_Order->billing_state)):											$xml .='<State>'.$WC_Order->billing_state.'</State>';										endif;										if(isset($WC_Order->billing_postcode)):											$xml .='<PostalCode>'.$WC_Order->billing_postcode.'</PostalCode>';										endif;										if(isset($WC_Order->billing_country)):											$xml .='<Country>'.$WC_Order->billing_country.'</Country>';										endif;									$xml .='</BillAddress>';								endif;								if(isset($WC_Order->billing_phone)):									$xml .='<Phone>'.$WC_Order->billing_phone.'</Phone>';								endif;								if(isset($WC_Order->billing_email)):									$xml .='<EMail>'.$WC_Order->billing_email.'</EMail>';								endif;							$xml .='</CustomerAdd>						</CustomerAddRq>					</QBPOSXMLMsgsRq>				</QBPOSXML>';			update_post_meta($ID, 'qb_customer_xml', $xml);			return $xml;					}	public static function _qbpos_customer_for_salesreceipt_add_response($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents)		{			$errnum = 0;			$errmsg = '';			$quickbooks = new SOD_QuickbooksPOS_Data;			$Parser = new QuickBooks_XML_Parser($xml);			$Doc = $Parser->parse($errnum, $errmsg);		    $Root = $Doc->getRoot();		    $List = $Root->getChildAt('QBPOSXML/QBPOSXMLMsgsRs/CustomerAddRs');		    foreach ( $List->children() as $Item ){		    	$arr = array('ListID' => $Item->getChildDataAt('CustomerRet ListID'));				$quickbooks->update_customer_listid($ID,$arr['ListID']);	        }			$Queue = new QuickBooks_WebConnector_Queue($quickbooks->dsn);			$Queue->enqueue('QBPOS_ADD_RECEIPT', $ID,7, NULL, $quickbooks->user);			return true;		}	public static function _qbpos_salesreceipt_add_request($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $version, $locale)		{			$xml ='';				$line_items='';			$quickbooks = new SOD_QuickbooksPOS_Data;			$WC_Order	= new WC_Order( $ID ); 			$payment_array = $quickbooks->settings->payment_mappings;			$payment_id = isset($payment_array[$WC_Order->payment_method]) ? $payment_array[$WC_Order->payment_method] : false;						$global_tax='';			$tax='';			$tender = "";			$order_xml = get_post_meta($ID, 'qbpos_order_xml', true);			$use_stored_xml = get_post_meta($ID, '_qbpos_use_stored_xml', true);			$stored_xml = isset($order_xml) ? get_post_meta($ID, 'qbpos_order_xml', true) :false;			if(method_exists($WC_Order, 'get_total')): 				$total 	= $WC_Order->get_total();			else:				$total 	= $WC_Order->get_order_total();			endif;			switch ($payment_id){				case"Cash":					$tender = '<TenderCashAdd> 									<TenderAmount>'.$total.'</TenderAmount>								</TenderCashAdd>';					break;				case"Check":					$tender = '<TenderCheckAdd> 									<CheckNumber>'.$ID.'</CheckNumber>									<TenderAmount>'.$total.'</TenderAmount>								</TenderCheckAdd>';					break;					case"Visa":				case"Mastercard":				case"Discover Card":				case"American Express":				case"Diners Club":				case"JCB":					$tender = '<TenderCreditCardAdd> 									<CardName>'.$payment_id.'</CardName>									<TenderAmount>'.$total.'</TenderAmount>								</TenderCreditCardAdd>';					break;			}			$shipping_method = $WC_Order->get_shipping_method();			$payment_methods = $quickbooks->settings->payment_mappings;			$payment_id = isset($payment_methods[$WC_Order->payment_method]) ? $payment_methods[$WC_Order->payment_method] : false;			/*checking account creating options */					/*1. Post to default account*/ 			/*2. Post to indiv accounts */				/*2a. use listid if available - should alwaye*/			$cust_listid 		= get_post_meta( $ID , '_customerPOSListID', true );			if(isset($cust_listid)):				$cust_ident = '<CustomerListID>'.$cust_listid.'</CustomerListID>';			else:				$cust_ident = '';			endif;			$items = $WC_Order->get_items();			foreach($items as $item){				$line_items .= '<SalesReceiptItemAdd>'.$quickbooks->get_item_info($item,  $WC_Order->order_tax).'</SalesReceiptItemAdd>';			}				if($quickbooks->settings->store_xml =="on" && $use_stored_xml=="yes" && isset($stored_xml)){			$xml = $stored_xml;		}else{			/*4. Construct full xml request */			$xml = '<?xml version="1.0" encoding="utf-8"?>			<?qbposxml version="3.0"?>				<QBPOSXML>			<QBPOSXMLMsgsRq onError="stopOnError">				<SalesReceiptAddRq>					<SalesReceiptAdd>						'.$cust_ident.'						<SalesReceiptType>Sales</SalesReceiptType>';						if($WC_Order->get_cart_discount() > 0):							$xml.='<Discount>' .$WC_Order->get_cart_discount().'</Discount>';						endif;						if($WC_Order->get_order_discount() > 0):							$xml.='<Discount>' .$WC_Order->get_order_discount().'</Discount>';						endif;						$xml.='<TxnDate>'.date("Y-m-d",strtotime($WC_Order->order_date)).'</TxnDate>';						if(							isset($WC_Order->shipping_city) || 							isset($WC_Order->shipping_country) ||							isset($WC_Order->shipping_last_name) ||							isset($WC_Order->shipping_first_name) ||							isset($WC_Order->billing_phone) ||							isset($WC_Order->shipping_postcode) ||							isset($WC_Order->order_shipping) ||							isset($WC_Order->shipping_state) ||							isset($WC_Order->shipping_address_1) ||							isset($WC_Order->shipping_address_2)						):						$xml.='<ShippingInformation>';							if(isset($WC_Order->shipping_city)):								$xml.='<City>'.$WC_Order->shipping_city.'</City>';							endif;							if(isset($WC_Order->shipping_company)):								$xml.='<CompanyName>'.$WC_Order->shipping_company.'</CompanyName>';							endif;							if(isset($WC_Order->shipping_country)):								$xml.='<Country>'.$WC_Order->shipping_country.'</Country>';							endif;							if(isset($WC_Order->shipping_last_name) && isset($WC_Order->shipping_first_name)):								$xml.='<FullName>'.$WC_Order->shipping_last_name.', '.$WC_Order->shipping_first_name.'</FullName>';							endif;							if(isset($WC_Order->billing_phone)):								$xml.='<Phone>'.$WC_Order->billing_phone.'</Phone>';							endif;							if(isset($WC_Order->shipping_postcode)):								$xml.='<PostalCode>'.$WC_Order->shipping_postcode.'</PostalCode>';							endif;							if(isset($WC_Order->order_shipping) && $WC_Order->order_shipping > 0 ):								$xml.='<Shipping>'.$WC_Order->order_shipping.'</Shipping>';							endif;							if(isset($WC_Order->shipping_state)):								$xml.='<State>'.$WC_Order->shipping_state.'</State>';							endif;							if(isset($WC_Order->shipping_address_1)):								$xml.='<Street>'.$WC_Order->shipping_address_1.'</Street>';							endif;							if(isset($WC_Order->shipping_address_2) && $WC_Order->shipping_address_2 !=''):								$xml .='<Street2>'.$WC_Order->shipping_address_2.'</Street2>';							endif;							$xml.='						</ShippingInformation>';						endif;						$xml.= $line_items . $tender.						'</SalesReceiptAdd>				</SalesReceiptAddRq>			</QBPOSXMLMsgsRq>		</QBPOSXML>';				};				if($quickbooks->settings->store_xml == "on"):			update_post_meta($ID, 'qbpos_order_xml',$xml);		endif;		return $xml;			}		public static function _qbpos_salesreceipt_add_response($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents)		{			$errnum = 0;			$errmsg = '';			$quickbooks = new SOD_QuickbooksPOS_Data;			$quickbooks->ID = $ID;			$Parser = new QuickBooks_XML_Parser($xml);			$Doc = $Parser->parse($errnum, $errmsg);		    $Root = $Doc->getRoot();		    $List = $Root->getChildAt('QBPOSXML/QBPOSXMLMsgsRs/SalesReceiptAddRs');		    foreach ($List->children() as $Item){		         $arr = array(		           		'TxnID' => $Item->getChildDataAt('SalesReceiptRet TxnID'),		                'TimeCreated' => $Item->getChildDataAt('SalesReceiptRet TimeCreated'),		                'SalesReceiptNumber'=>$Item->getChildDataAt('SalesReceiptRet SalesReceiptNumber'),						'TxnDate'=>$Item->getChildDataAt('SalesReceiptRet TxnDate')						);	        }			update_post_meta($ID, '_qbpos_data', $arr);			$quickbooks->update_qbpos_response_info($arr);				delete_post_meta($ID, '_qbpos_error_msg');			delete_post_meta($ID, '_qbpos_order_requeued');			delete_post_meta($ID, '_qbpos_auto_add_failed');			return true;				}	public static function _quicbookspos_inventory_add_request($requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $version, $locale){			$quickbooks	= new SOD_QuickbooksPOS_Data;			$post 		= get_post($ID);			$xml 		='';						if(function_exists('get_product')):				$item  = get_product( $ID );			else:				if($post->post_parent > 0 ):					$item  = new WC_Product_Variation($ID);				else:					$item  = new WC_Product($ID);				endif;			endif;						$name 		= $item->get_title();			$cats 		= wp_get_post_terms($ID,'product_cat', array( 'hide_empty' => 0 ));			$depts_array = isset($quickbooks->settings->department_mappings) ? $quickbooks->settings->department_mappings : array();			$wc_dept 	= sizeof($cats) > 0 && sizeof($depts_array) ? $dept_array[str_replace(" ","_",strtolower($cats[0]->slug))] : null;			$dept 		= $wc_dept ? $wc_dept : $quickbooks->settings->default_department;			$stock 		= $item->get_stock_quantity() !="" || $item->get_stock_quantity() != false? $item->get_stock_quantity() :"0" ;			$default_item_type = str_replace(' ', '', ucwords(str_replace('_', ' ', $quickbooks->inventory_settings->default_itemtype)));			$item_type 	= get_post_meta($ID, '_qbpos_item_type', true) ? get_post_meta($ID, '_qbpos_item_type', true) : $default_item_type; 			switch ($quickbooks->inventory_settings->qbpos_identifier) {				case 'UPC':					$alu = '';					break;				case 'ALU':					$alu = '<ALU>'.$item->get_sku().'</ALU>';					break;				case 'ItemNumber':					$alu = '';					break;				case 'Desc2':					$alu = '';					break;			} 			$price_level_mappings = $quickbooks->settings->pricelevel_mappings;						if($item->price):				switch($price_level_mappings['regular_price']){					case 'PriceLevel1':						$price1 = $item->price ? '<Price1>'.$item->price.'</Price1>': '<Price1>'.$item->regular_price.'</Price1>';					break;					case 'PriceLevel2':						$price1 = $item->price ? '<Price2>'.$item->price.'</Price2>': '<Price2>'.$item->regular_price.'</Price2>';					break;					case 'PriceLevel3':						$price1 = $item->price ? '<Price3>'.$item->price.'</Price3>': '<Price3>'.$item->regular_price.'</Price3>';					break;					case 'PriceLevel4':						$price1 = $item->price ? '<Price4>'.$item->price.'</Price4>': '<Price4>'.$item->regular_price.'</Price4>';					break;					case 'PriceLevel5':						$price1 = $item->price ? '<Price5>'.$item->price.'</Price5>': '<Price5>'.$item->regular_price.'</Price5>';					break;					}							endif;			if($item->sale_price):				switch($price_level_mappings['sale_price']){					case 'PriceLevel1':						$price2 = '<Price1>'.$item->sale_price.'</Price1>';					break;					case 'PriceLevel2':						$price2 = '<Price2>'.$item->sale_price.'</Price2>';					break;					case 'PriceLevel3':						$price2 = '<Price3>'.$item->sale_price.'</Price3>';					break;					case 'PriceLevel4':						$price2 = '<Price4>'.$item->sale_price.'</Price4>';					break;					case 'PriceLevel5':						$price2 = '<Price5>'.$item->sale_price.'</Price5>';					break;				}			else:				$price2 = '';			endif;			if($item->get_tax_class()):				$tax_code			= str_replace(" ","_",strtolower($this->get_tax_class()));				$tax_codes_array 	= $quickbooks->settings->taxcodes_mappings->$tax_code;				$code 				= isset($tax_codes_array[$tax_code]) ? $tax_codes_array[$tax_code] : false;				if(isset($code)) :  					$tax_code 		= '<TaxCode>'.$code.'</TaxCode>';				endif;			endif;			$xml = '<?xml version="1.0"?>					<?qbposxml version="2.0"?>						<QBPOSXML>						  <QBPOSXMLMsgsRq onError="stopOnError">						    <ItemInventoryAddRq requestID="'.$requestID.'">						      <ItemInventoryAdd>									<DepartmentListID>'.$dept.'</DepartmentListID>';							  	if(isset($tax_code)):									$xml.='<TaxCode>'.$tax_code.'</TaxCode>';								endif;							$xml.='									<Desc1>'.$name.'</Desc1>';									if($alu !==''):										$xml.=$alu;									endif;									$xml.='<ItemType>'.$item_type.'</ItemType>'						    		.$price1.$price2.'						    		<OnHandStore01>'.$stock.'</OnHandStore01>						    	</ItemInventoryAdd>						    </ItemInventoryAddRq>						  </QBPOSXMLMsgsRq>				</QBPOSXML>';			return $xml;		}	public static function _quicbookspos_inventory_add_response($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents){		$quickbooks = new SOD_QuickbooksPOS_Data;		$quickbooks->ID = $ID;		$errnum = 0;		$errmsg = '';		$Parser = new QuickBooks_XML_Parser($xml);		$Doc = $Parser->parse($errnum, $errmsg);	    $Root = $Doc->getRoot();	    $List = $Root->getChildAt('QBPOSXML/QBPOSXMLMsgsRs/ItemInventoryAddRs');	    foreach ($List->children() as $Item){	         $arr = array(	               'ListID' => $Item->getChildDataAt('ItemInventoryRet ListID'),	              	'ALU'=>$Item->getChildDataAt('ItemInventoryRet ALU'),	                'ItemNumber' => $Item->getChildDataAt('ItemInventoryRet ItemNumber'),	                'DepartmentCode' => $Item->getChildDataAt('ItemInventoryRet DepartmentCode'),	                'DepartmentListID' => $Item->getChildDataAt('ItemInventoryRet DepartmentListID'),	                'Desc1' => $Item->getChildDataAt('ItemInventoryRet Desc1'),	                'Desc2' => $Item->getChildDataAt('ItemInventoryRet Desc2'),	                'UPC' => $Item->getChildDataAt('ItemInventoryRet UPC'),	                'QuantityOnHand' => $Item->getChildDataAt('ItemInventoryRet QuantityOnHand'),	                'ItemType'=> $Item->getChildDataAt('ItemInventoryRet ItemType'),	                'Price1'=>$Item->getChildDataAt('ItemInventoryRet Price1'),	                'Price2'=>$Item->getChildDataAt('ItemInventoryRet Price2'),	                'Price3'=>$Item->getChildDataAt('ItemInventoryRet Price3'),	                'Price4'=>$Item->getChildDataAt('ItemInventoryRet Price4'),	                'Price5'=>$Item->getChildDataAt('ItemInventoryRet Price5'),	                'TaxCode'=>$Item->getChildDataAt('ItemInventoryRet TaxCode')				 );	     }		$quickbooks->update_qbpos_response_info($arr);		return true;	}	public static function _quicbookspos_inventory_query_request($requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $version, $locale){		/*QuickBooks Settings*/			$quickbooks 	 = new SOD_QuickbooksPOS_Data();			/*Indvd'l Item Item Type*/		$item_type 		 = get_post_meta($ID, '_qbpos_item_type', true);		/*Indvd'l QBPOS Item Number*/		$item_number 	 = get_post_meta($ID, '_qbpos_item_number', true);		/*WC Product Mapping Identifier*/ 		$wc_identifier	 = $quickbooks->inventory_settings->product_identifier == "_sku" ? get_post_meta($ID, $quickbooks->inventory_settings->product_identifier, true) : $ID;		$match_criterion = '';		switch ($quickbooks->inventory_settings->qbpos_identifier) {			case 'UPC':				$match_criterion = '<UPCFilter><MatchStringCriterion>Equal</MatchStringCriterion><UPC>'.$wc_identifier.'</UPC></UPCFilter>';				break;			case 'ALU':				$match_criterion = '<ALUFilter><MatchStringCriterion>Equal</MatchStringCriterion><ALU>'.$wc_identifier.'</ALU></ALUFilter>';				break;			case 'ItemNumber':				$match_criterion = '<ItemNumberFilter><MatchNumericCriterion>Equal</MatchNumericCriterion><ItemNumber>'.$wc_identifier.'</ItemNumber></ItemNumberFilter>';				break;			case 'Desc2':				$match_criterion = '<Desc2Filter><MatchStringCriterion>Equal</MatchStringCriterion><Desc2>'.$wc_identifier.'</Desc2></Desc2Filter>';				break;		} 		$xml ='<?xml version="1.0" encoding="utf-8"?>					<?qbposxml version="2.0"?>						<QBPOSXML>							<QBPOSXMLMsgsRq onError="continueOnError">								<ItemInventoryQueryRq requestID="'.$requestID.'">'									.$match_criterion.'									</ItemInventoryQueryRq>							</QBPOSXMLMsgsRq>						</QBPOSXML>';		return $xml;	}	public static function _quicbookspos_inventory_query_response($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents){		$errnum = 0;		$errmsg = '';		$quickbooks = new SOD_QuickbooksPOS_Data;		$Parser = new QuickBooks_XML_Parser($xml);		$Doc = $Parser->parse($errnum, $errmsg);		$Root = $Doc->getRoot();		$List = $Root->getChildAt('QBPOSXML/QBPOSXMLMsgsRs/ItemInventoryQueryRs');		foreach ($List->children() as $Item){	         $arr = array(		              	'ListID' 			=> $Item->getChildDataAt('ItemInventoryRet ListID'),		              	'ALU'				=> $Item->getChildDataAt('ItemInventoryRet ALU'),		                'ItemNumber' 		=> $Item->getChildDataAt('ItemInventoryRet ItemNumber'),		                'DepartmentCode' 	=> $Item->getChildDataAt('ItemInventoryRet DepartmentCode'),		                'DepartmentListID' 	=> $Item->getChildDataAt('ItemInventoryRet DepartmentListID'),		                'Desc1' 			=> $Item->getChildDataAt('ItemInventoryRet Desc1'),		                'Desc2' 			=> $Item->getChildDataAt('ItemInventoryRet Desc2'),		                'QuantityOnHand' 	=> $Item->getChildDataAt('ItemInventoryRet QuantityOnHand'),		                'ItemType'			=> $Item->getChildDataAt('ItemInventoryRet ItemType'),		                'UPC' 				=> $Item->getChildDataAt('ItemInventoryRet UPC'),		                'Price1'			=> $Item->getChildDataAt('ItemInventoryRet Price1'),		                'Price2'			=> $Item->getChildDataAt('ItemInventoryRet Price2'),		                'Price3'			=> $Item->getChildDataAt('ItemInventoryRet Price3'),		                'Price4'			=> $Item->getChildDataAt('ItemInventoryRet Price4'),		                'Price5'			=> $Item->getChildDataAt('ItemInventoryRet Price5'),		                'TaxCode'			=> $Item->getChildDataAt('ItemInventoryRet TaxCode'),	                );				$quickbooks->update_item_by_sku($ID, $arr);		}		return true;    }	public static function _quicbookspos_inventory_sync_request($requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $version, $locale){		$iterator='';		if(!empty($extra)){			if(array_key_exists('iteratorID',$extra)){				$iterator='iterator="Continue" iteratorID="'.$extra['iteratorID'].'"';			}		}else{			$iterator='iterator="Start"';		}		$xml ='<?xml version="1.0" encoding="utf-8"?>					<?qbposxml version="2.0"?>						<QBPOSXML>							<QBPOSXMLMsgsRq onError="continueOnError">								<ItemInventoryQueryRq requestID="'.$requestID.'" '.$iterator.'>									<MaxReturned>100</MaxReturned>								</ItemInventoryQueryRq>							</QBPOSXMLMsgsRq>						</QBPOSXML>';		return $xml;	}	public static function _quicbookspos_inventory_sync_response($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents){		$errnum = 0;		$errmsg = '';		$quickbooks = new SOD_QuickbooksPOS_Data;		$Parser = new QuickBooks_XML_Parser($xml);		$Doc = $Parser->parse($errnum, $errmsg);		$Root = $Doc->getRoot();		$List = $Root->getChildAt('QBPOSXML/QBPOSXMLMsgsRs/ItemInventoryQueryRs');		$remaining = $idents['iteratorRemainingCount'];		foreach ($List->children() as $Item){	         $arr = array(		              	'ListID' => $Item->getChildDataAt('ItemInventoryRet ListID'),		              	'ALU'=>$Item->getChildDataAt('ItemInventoryRet ALU'),		                'ItemNumber' => $Item->getChildDataAt('ItemInventoryRet ItemNumber'),		                'DepartmentCode' => $Item->getChildDataAt('ItemInventoryRet DepartmentCode'),		                'DepartmentListID' => $Item->getChildDataAt('ItemInventoryRet DepartmentListID'),		                'Desc1' => $Item->getChildDataAt('ItemInventoryRet Desc1'),		                'Desc2' => $Item->getChildDataAt('ItemInventoryRet Desc2'),		                'UPC' => $Item->getChildDataAt('ItemInventoryRet UPC'),		                'QuantityOnHand' => $Item->getChildDataAt('ItemInventoryRet QuantityOnHand'),		                'ItemType'=> $Item->getChildDataAt('ItemInventoryRet ItemType'),		                'Price1'=>$Item->getChildDataAt('ItemInventoryRet Price1'),		                'Price2'=>$Item->getChildDataAt('ItemInventoryRet Price2'),		                'Price3'=>$Item->getChildDataAt('ItemInventoryRet Price3'),		                'Price4'=>$Item->getChildDataAt('ItemInventoryRet Price4'),		                'Price5'=>$Item->getChildDataAt('ItemInventoryRet Price5'),		                'TaxCode'=>$Item->getChildDataAt('ItemInventoryRet TaxCode'),	                );			$quickbooks->inventory_sync_response($arr);		}		if((int)$remaining>0){			$Queue = new QuickBooks_WebConnector_Queue($quickbooks->dsn);			$extra = $idents;			//$Queue->enqueue('QBPOS_INVENTORY_SYNC_START',uniqid(),9,$extra);		}else{			$quickbooks->recheck_stock_status();		}		return true;    }	public static function _quicbookspos_inventory_update_request($requestID, $user, $action, $ID, $extra, $err, $last_action_time, $last_actionident_time, $version, $locale){		/*QuickBooks Settings*/			$quickbooks 	 = new SOD_QuickbooksPOS_Data();			/*Indvd'l Item Item Type*/		$item_type 		 = get_post_meta($ID, '_qbpos_item_type', true);		/*Indvd'l QBPOS Item Number*/		$item_number 	 = get_post_meta($ID, '_qbpos_item_number', true);		/*WC Product Mapping Identifier*/ 		$wc_identifier	 = $quickbooks->inventory_settings->product_identifier == "_sku" ? get_post_meta($ID, $quickbooks->inventory_settings->product_identifier, true) : $ID;				$match_criterion = '';		switch ($quickbooks->inventory_settings->qbpos_identifier) {			case 'UPC':				$match_criterion = '<UPCFilter>										<MatchStringCriterion>Equal</MatchStringCriterion>										<UPC>'.$wc_identifier.'</UPC>									</UPCFilter>';				break;			case 'ALU':				$match_criterion = '<ALUFilter>										<MatchStringCriterion>Equal</MatchStringCriterion>										<ALU>'.$wc_identifier.'</ALU>									</ALUFilter>';				break;			case 'ItemNumber':				$match_criterion = '<ItemNumberFilter>										<MatchNumericCriterion>Equal</MatchNumericCriterion>										<ItemNumber>'.$wc_identifier.'</ItemNumber>									</ItemNumberFilter>';				break;			case 'Desc2':				$match_criterion = '<Desc2Filter>										<MatchStringCriterion>Equal</MatchStringCriterion>										<Desc2>'.$wc_identifier.'</Desc2>									</Desc2Filter>';				break;		} 		$xml = '<?xml version="1.0" encoding="utf-8"?>					<?qbposxml version="2.0"?>						<QBPOSXML>							<QBPOSXMLMsgsRq onError="stopOnError">		    					<ItemInventoryQueryRq requestID="'.$requestID.'">		        					'.$match_criterion.'		    					</ItemInventoryQueryRq>							</QBPOSXMLMsgsRq>						</QBPOSXML>';			return $xml;	}	public static function _quicbookspos_inventory_update_response($requestID, $user, $action, $ID, $extra, &$err, $last_action_time, $last_actionident_time, $xml, $idents){		$errnum 		= 0;		$errmsg 		= '';		$quickbooks 	= new SOD_QuickbooksPOS_Data;		$quickbooks->ID = $ID; 		$Parser 		= new QuickBooks_XML_Parser($xml);		$Doc 			= $Parser->parse($errnum, $errmsg);		$Root 			= $Doc->getRoot();		$List 			= $Root->getChildAt('QBPOSXML/QBPOSXMLMsgsRs/ItemInventoryQueryRs');		foreach ($List->children() as $Item) {	         $arr = array(		                'ListID' => $Item->getChildDataAt('ItemInventoryRet ListID'),		                'ItemNumber' => $Item->getChildDataAt('ItemInventoryRet ItemNumber'),		                'DepartmentCode' => $Item->getChildDataAt('ItemInventoryRet DepartmentCode'),		                'DepartmentListID' => $Item->getChildDataAt('ItemInventoryRet DepartmentListID'),		                'Desc1' => $Item->getChildDataAt('ItemInventoryRet Desc1'),		                'Desc2' => $Item->getChildDataAt('ItemInventoryRet Desc2'),		                'UPC' => $Item->getChildDataAt('ItemInventoryRet UPC'),		                'QuantityOnHand' => $Item->getChildDataAt('ItemInventoryRet QuantityOnHand'),		                'ItemType'=> $Item->getChildDataAt('ItemInventoryRet ItemType'),		                'Price1'=>$Item->getChildDataAt('ItemInventoryRet Price1'),		                'Price2'=>$Item->getChildDataAt('ItemInventoryRet Price2'),		                'Price3'=>$Item->getChildDataAt('ItemInventoryRet Price3'),		                'Price4'=>$Item->getChildDataAt('ItemInventoryRet Price4'),		                'Price5'=>$Item->getChildDataAt('ItemInventoryRet Price5'),	                );			$quickbooks->update_qbpos_response_info($arr);		}		return true;	}	public static function _qbpos_customer_already_exists($requestID, $user, $action, $ID, $extra, $err, $xml, $errnum, $errmsg){		$quickbooks = SOD_QuickBooks_WebConnector_Queue;			$Queue = new QuickBooks_WebConnector_Queue($quickbooks->dsn);				if($quickbooks->settings->post_orders =='on'):			$Queue->enqueue('QBPOS_ADD_RECEIPT', $ID,7, NULL, $quickbooks->user);		endif;		return true;	}		public static function _qbpos_error_stringtoolong($requestID, $user, $action, $ID, $extra, &$err, $xml, $errnum, $errmsg)		{					}	public static function _qbpos_customer_not_found($requestID, $user, $action, $ID, $extra, &$err, $xml, $errnum, $errmsg){			$quickbooks = new SOD_QuickbooksPOS_Data;			$Queue = new QuickBooks_WebConnector_Queue($quickbooks->dsn);				$Queue->enqueue('QBPOS_ADD_CUST_RCPT',$ID, 0,NULL, $quickbooks->user);			return true;		}	public static function _qbpos_product_not_found($requestID, $user, $action, $ID, $extra, &$err, $xml, $errnum, $errmsg){			//Add option to automatically add items to Quickbooks			$quickbooks= new SOD_QuickbooksPOS_Data;			if(isset($quickbooks->inventory_settings->auto_create)):					if($quickbooks->inventory_settings->auto_create == "on"):					$Queue = new QuickBooks_WebConnector_Queue($quickbooks->dsn);					$Queue->enqueue('QBPOS_ITEM_INVENTORY_ADD', $ID,0, NULL, $quickbooks->user);					endif;			endif;					return true;		}	public static function _qbpos_product_already_exists($requestID, $user, $action, $ID, $extra, &$err, $xml, $errnum, $errmsg){			$quickbooks= new SOD_QuickbooksPOS_Data;			$Queue = new QuickBooks_WebConnector_Queue($quickbooks->dsn);			$Queue->enqueue('QBPOS_ITEM_INV_UPDATE', $ID,0, NULL, $quickbooks->user);				return true;	}		public static function _qbpos_convert_price($requestID, $user, $action, $ID, $extra, &$err, $xml, $errnum, $errmsg){			$quickbooks = new SOD_QuickbooksPOS_Data;			if($quickbooks->inventory_settings->auto_create == "on"):				$Queue = new QuickBooks_WebConnector_Queue($quickbooks->dsn);				$Queue->enqueue('QBPOS_ITEM_INVENTORY_ADD', $ID,0, NULL, $quickbooks->user);			endif;				return true;		}	public static function _qbpos_failed_salesreceipt_add($requestID, $user, $action, $ID, $extra, &$err, $xml, $errnum, $errmsg){			update_post_meta($ID, '_qbpos_auto_add_failed', 'yes');				update_post_meta($ID, '_qbpos_error_msg', $errmsg);			delete_post_meta($ID, '_qbpos_order_requeued');			delete_post_meta($ID, '_qbpos_initial_queue');			return true;		}		public static function _qbpos_invalid_email($requestID, $user, $action, $ID, $extra, &$err, $xml, $errnum, $errmsg){			return true;		}	public static function _qbpos_create_ara_account_failure($requestID, $user, $action, $ID, $extra, &$err, $xml, $errnum, $errmsg){		return true;	}	public static function _qbpos_broken_iterator($requestID, $user, $action, $ID, $extra, &$err, $xml, $errnum, $errmsg){		return true;	}	public static function _qbpos_no_noninventory($requestID, $user, $action, $ID, $extra, &$err, $xml, $errnum, $errmsg){		return true;	}	public static function _qbpos_no_inventory($requestID, $user, $action, $ID, $extra, &$err, $xml, $errnum, $errmsg){		return true;	}}